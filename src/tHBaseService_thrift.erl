%%
%% Autogenerated by Thrift Compiler (0.9.0)
%%
%% DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
%%

-module(tHBaseService_thrift).
-behaviour(thrift_service).


-include("tHBaseService_thrift.hrl").

-export([struct_info/1, function_info/2]).

struct_info('i am a dummy struct') -> undefined.
%%% interface
% exists(This, Table, Get)
function_info('exists', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tGet'}}}]}
;
function_info('exists', reply_type) ->
  bool;
function_info('exists', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% get(This, Table, Get)
function_info('get', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tGet'}}}]}
;
function_info('get', reply_type) ->
  {struct, {'hbase2_types', 'tResult'}};
function_info('get', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% getMultiple(This, Table, Gets)
function_info('getMultiple', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase2_types', 'tGet'}}}}]}
;
function_info('getMultiple', reply_type) ->
  {list, {struct, {'hbase2_types', 'tResult'}}};
function_info('getMultiple', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% put(This, Table, Put)
function_info('put', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tPut'}}}]}
;
function_info('put', reply_type) ->
  {struct, []};
function_info('put', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% checkAndPut(This, Table, Row, Family, Qualifier, Value, Put)
function_info('checkAndPut', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, {struct, {'hbase2_types', 'tPut'}}}]}
;
function_info('checkAndPut', reply_type) ->
  bool;
function_info('checkAndPut', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% putMultiple(This, Table, Puts)
function_info('putMultiple', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase2_types', 'tPut'}}}}]}
;
function_info('putMultiple', reply_type) ->
  {struct, []};
function_info('putMultiple', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% deleteSingle(This, Table, DeleteSingle)
function_info('deleteSingle', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tDelete'}}}]}
;
function_info('deleteSingle', reply_type) ->
  {struct, []};
function_info('deleteSingle', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% deleteMultiple(This, Table, Deletes)
function_info('deleteMultiple', params_type) ->
  {struct, [{1, string},
          {2, {list, {struct, {'hbase2_types', 'tDelete'}}}}]}
;
function_info('deleteMultiple', reply_type) ->
  {list, {struct, {'hbase2_types', 'tDelete'}}};
function_info('deleteMultiple', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% checkAndDelete(This, Table, Row, Family, Qualifier, Value, DeleteSingle)
function_info('checkAndDelete', params_type) ->
  {struct, [{1, string},
          {2, string},
          {3, string},
          {4, string},
          {5, string},
          {6, {struct, {'hbase2_types', 'tDelete'}}}]}
;
function_info('checkAndDelete', reply_type) ->
  bool;
function_info('checkAndDelete', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% increment(This, Table, Increment)
function_info('increment', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tIncrement'}}}]}
;
function_info('increment', reply_type) ->
  {struct, {'hbase2_types', 'tResult'}};
function_info('increment', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% append(This, Table, Append)
function_info('append', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tAppend'}}}]}
;
function_info('append', reply_type) ->
  {struct, {'hbase2_types', 'tResult'}};
function_info('append', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% openScanner(This, Table, Scan)
function_info('openScanner', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tScan'}}}]}
;
function_info('openScanner', reply_type) ->
  i32;
function_info('openScanner', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% getScannerRows(This, ScannerId, NumRows)
function_info('getScannerRows', params_type) ->
  {struct, [{1, i32},
          {2, i32}]}
;
function_info('getScannerRows', reply_type) ->
  {list, {struct, {'hbase2_types', 'tResult'}}};
function_info('getScannerRows', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}},
          {2, {struct, {'hbase2_types', 'tIllegalArgument'}}}]}
;
% closeScanner(This, ScannerId)
function_info('closeScanner', params_type) ->
  {struct, [{1, i32}]}
;
function_info('closeScanner', reply_type) ->
  {struct, []};
function_info('closeScanner', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}},
          {2, {struct, {'hbase2_types', 'tIllegalArgument'}}}]}
;
% mutateRow(This, Table, RowMutations)
function_info('mutateRow', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tRowMutations'}}}]}
;
function_info('mutateRow', reply_type) ->
  {struct, []};
function_info('mutateRow', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
% getScannerResults(This, Table, Scan, NumRows)
function_info('getScannerResults', params_type) ->
  {struct, [{1, string},
          {2, {struct, {'hbase2_types', 'tScan'}}},
          {3, i32}]}
;
function_info('getScannerResults', reply_type) ->
  {list, {struct, {'hbase2_types', 'tResult'}}};
function_info('getScannerResults', exceptions) ->
  {struct, [{1, {struct, {'hbase2_types', 'tIOError'}}}]}
;
function_info(_Func, _Info) -> no_function.

